#+startup: content
#+TAGS: core optional experimental

* Package manager
** Core Package manager                                               :core:
#+begin_src emacs-lisp
(defvar my-packages
  '(paredit ido-ubiquitous
            find-file-in-project magit scpaste cider
            clojure-mode solarized-theme 
            clojure-mode-extra-font-locking
            highlight-parentheses
            smartparens clj-refactor company
            auctex htmlize))

(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))

(require 'clojure-mode)
(require 'clojure-mode-extra-font-locking)
(require 'cider)
(require 'tex)
(require 'htmlize)
(require 'clj-refactor)
(require 'ob-clojure)

#+end_src

** Optional packages                                              :optional:
#+begin_src emacs-lisp
(defvar opt-packages
  '(helm yasnippet company ess))

(dolist (p opt-packages)
  (when (not (package-installed-p p))
    (package-install p)))

(require 'company)
(require 'ess-site)
(require 'yasnippet)
(require 'helm)
(require 'helm-config)
#+end_src
* Backup                                                           :optional:
#+BEGIN_SRC emacs-lisp

(setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                               "backups")))
      make-backup-files t               ; backup of a file the first time it is saved.
      backup-by-copying t               ; don't clobber symlinks
      version-control t                 ; version numbers for backup files
      delete-old-versions t             ; delete excess backup files silently
      delete-by-moving-to-trash t
      kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
      auto-save-default t               ; auto-save every buffer that visits a file
      )

#+END_SRC

* Helm                                                             :optional:
** helm 
#+begin_src emacs-lisp
(defun helm-toggle-header-line ()
  (if (= (length helm-sources) 1)
      (set-face-attribute 'helm-source-header nil :height 0.1)
    (set-face-attribute 'helm-source-header nil :height 1.0)))

(add-hook 'helm-before-initialize-hook 'helm-toggle-header-line)
(helm-autoresize-mode 1)
(setq helm-autoresize-max-height 30)
(setq helm-autoresize-min-height 30)
(setq helm-split-window-in-side-p t)

(global-set-key (kbd "M-x") 'helm-M-x)
(setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x

(global-set-key (kbd "C-x b") 'helm-mini)
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(helm-mode 1)
#+end_src

** helm smex
#+begin_src emacs-lisp

(defun helm-smex-items ()
  (smex-rebuild-cache)
  (smex-convert-for-ido smex-cache))

(defun helm-smex-execute-command (command)
  (let ((prefix-arg current-prefix-arg))
    (command-execute command 'record)
    (smex-rank command)))

(setq helm-smex-source
  '((name . "M-x")
    (candidates . helm-smex-items)
    (coerce . intern)
    (action ("smex" . (helm-smex-execute-command)))))

(defun helm-smex ()
  (interactive)
  (helm :sources 'helm-smex-source :buffer "*helm-smex*"))

#+end_src

** recentf
#+begin_src emacs-lisp
(global-set-key "\C-x\ f" 'helm-recentf)
#+end_src

** swoop
#+begin_src emacs-lisp
(require 'helm-swoop)
(define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
(define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
(define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
(define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)

(global-set-key (kbd "C-s") 'helm-swoop)

;; isearch
;;(global-set-key (kbd "C-s") 'isearch-forward)
;;(global-set-key (kbd "C-r") 'isearch-backward)
(global-set-key (kbd "C-M-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-M-r") 'isearch-backward-regexp)

(setq helm-swoop-pre-input-function
      (lambda () ""))
#+end_src

* ido                                                              :optional:
sometimes I just don't like helm-find-file... Comment out to go back
to helm-find-file
#+begin_src emacs-lisp
(ido-mode t)
(setq ido-enable-flex-matching t)
#+end_src

* General settings
** Aesthetics                                                         :core:
*** System- or user-specific customization
   #+begin_src emacs-lisp
   (custom-set-variables '(inhibit-startup-screen t))

   (cond
    ;; Windows
    ((string-equal system-type "windows-nt")
     (add-to-list 'default-frame-alist '(font . "Consolas-11"))
     (load-theme 'solarized-light t)
     (defun remove-dos-eol ()
       "Do not show ^M in files containing mixed UNIX and DOS line endings."
       (interactive)
       (setq buffer-display-table (make-display-table))
       (aset buffer-display-table ?\^M []))
     (add-hook 'cider-repl-mode-hook 'remove-dos-eol)) ;Remove ^M from clojure repl in windows
    
    ;; Mac OS X
    ((string-equal system-type "darwin")
     (define-key cider-repl-mode-map (kbd "C-S-<up>") 'cider-repl-backward-input)
     (define-key cider-repl-mode-map (kbd "C-S-<down>") 'cider-repl-forward-input)
     (setq mouse-wheel-scroll-amount '(0.01));smoother scroll
     (add-to-list 'default-frame-alist '(font . "monaco-10"))
     (load-theme 'solarized-light t))
    
    ;; Linux
    ((string-equal system-type "gnu/linux")
     (load-theme 'solarized-dark t)
     ))
   #+end_src

*** Menu aesthetics
   #+begin_src emacs-lisp
   (defalias 'auto-tail-revert-mode 'tail-mode)
   (when (fboundp 'menu-bar-mode) (menu-bar-mode 1))
   (when (fboundp 'tool-bar-mode) (tool-bar-mode 1))
   (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

   (when window-system
     (setq frame-title-format '(buffer-file-name "%f" ("%b")))
     (tooltip-mode -1)
     (mouse-wheel-mode t)
     (blink-cursor-mode -1))

   (setq inhibit-startup-message t)
   #+end_src

** better defaults                                                    :core:
I think there is a problem in one of the settings here.

#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)

(require 'saveplace)
(setq-default save-place t)

(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
(setq x-select-enable-clipboard t
      x-select-enable-primary t
      save-interprogram-paste-before-kill t
      apropos-do-all t
      mouse-yank-at-point t
      save-place-file (concat user-emacs-directory "places"))

#+end_src

** starter-kit-defuns                                                 :core:
   #+begin_src emacs-lisp
   (defun esk-local-column-number-mode ()
     (make-local-variable 'column-number-mode)
     (column-number-mode t))

   (defun esk-local-comment-auto-fill ()
     (set (make-local-variable 'comment-auto-fill-only-comments) t)
     (auto-fill-mode t))

   (defun esk-turn-on-hl-line-mode ()
     (when (> (display-color-cells) 8)
       (hl-line-mode t)))

   (defun esk-pretty-lambdas ()
     (font-lock-add-keywords
      nil `(("(?\\(lambda\\>\\)"
             (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                       ,(make-char 'greek-iso8859-7 107))
                       nil))))))

   (defun esk-add-watchwords ()
     (font-lock-add-keywords
      nil '(("\\<\\(FIX\\(ME\\)?\\|TODO\\|HACK\\|REFACTOR\\|NOCOMMIT\\)"
             1 font-lock-warning-face t))))

   (add-hook 'prog-mode-hook 'esk-local-column-number-mode)
   ;;(add-hook 'prog-mode-hook 'esk-local-comment-auto-fill)
   ;;(add-hook 'prog-mode-hook 'esk-turn-on-hl-line-mode)
   (add-hook 'prog-mode-hook 'esk-pretty-lambdas)
   (add-hook 'prog-mode-hook 'esk-add-watchwords)
   ;;(add-hook 'prog-mode-hook 'idle-highlight-mode)

   (defun esk-untabify-buffer ()
     (interactive)
     (untabify (point-min) (point-max)))

   (defun esk-indent-buffer ()
     (interactive)
     (indent-region (point-min) (point-max)))

   (defun esk-cleanup-buffer ()
     "Perform a bunch of operations on the whitespace content of a buffer."
     (interactive)
     (esk-indent-buffer)
     (esk-untabify-buffer)
     (delete-trailing-whitespace))

   #+end_src
** starter-kit-lisp                                                   :core:
#+begin_src emacs-lisp
(define-key emacs-lisp-mode-map (kbd "C-c v") 'eval-buffer)
(define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)

(defface esk-paren-face
  '((((class color) (background dark))
      (:foreground "grey50"))
     (((class color) (background light))
      (:foreground "grey55")))
   "Face used to dim parentheses."
   :group 'starter-kit-faces)

(font-lock-add-keywords 'emacs-lisp-mode
                        '(("(\\|)" . 'esk-paren-face)))
#+end_src
** UTF-8                                                              :core:
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

#+end_src

** Flyspell                                                           :core:
#+begin_src emacs-lisp
(dolist (hook '(text-mode-hook))
      (add-hook hook (lambda () (flyspell-mode 1))))
    (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
      (add-hook hook (lambda () (flyspell-mode -1))))

(defun flyspell-check-next-highlighted-word ()
  "Custom function to spell check next highlighted word"
  (interactive)
  (flyspell-goto-next-error)
  (ispell-word)
  )

;; easy spell check
(global-set-key (kbd "<f8>") 'ispell-word)
(global-set-key (kbd "C-S-<f8>") 'flyspell-mode)
(global-set-key (kbd "C-M-<f8>") 'flyspell-buffer)
(global-set-key (kbd "C-<f8>") 'flyspell-check-previous-highlighted-word)
(global-set-key (kbd "M-<f8>") 'flyspell-check-next-highlighted-word)

#+end_src

** Windmove                                                           :core:
#+begin_src emacs-lisp
(windmove-default-keybindings)

(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+end_src

** Auto fill mode                                                     :core:
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

** Autoindent                                                     :optional:
#+begin_src emacs-lisp
(unless (package-installed-p 'auto-indent-mode)
  (package-install 'auto-indent-mode))

(auto-indent-global-mode)
(setq auto-indent-indent-style 'conservative)

(defun kicker-ess-fix-code (beg end)
    "Fixes ess path"
    (save-restriction
      (save-excursion
        (save-match-data
          (narrow-to-region beg end)
          (goto-char (point-min))
          (while (re-search-forward "^[ \t]*[>][ \t]+" nil t)
            (replace-match "")
            (goto-char (point-at-eol))
            (while (looking-at "[ \t\n]*[+][ \t]+")
              (replace-match "\n")
              (goto-char (point-at-eol))))))))
  
  (defun kicker-ess-turn-on-fix-code ()
    (interactive)
    (when (string= "R" ess-language)
      (add-hook 'auto-indent-after-yank-hook 'kicker-ess-fix-code t t)))
;;(add-hook 'ess-mode-hook 'kicker-ess-turn-on-fix-code)

#+end_src

** scratch                                                        :optional:
#+begin_src emacs-lisp
(unless (package-installed-p 'scratch)
  (package-install package))

(autoload 'scratch "scratch" nil t)

#+end_src

* Custom functions/keybinds                                            :core:
** Custom functions
#+begin_src emacs-lisp
(defun unfill-paragraph ()
  (interactive)
  (let ((fill-column (point-max)))
    (fill-paragraph nil)))

(defun unfill-region ()
  (interactive)
  (let ((fill-column (point-max)))
    (fill-region (region-beginning) (region-end) nil)))

(defun my/fill-or-unfill-paragraph (&optional unfill region)
  "Fill paragraph (or REGION).
  With the prefix argument UNFILL, unfill it instead."
  (interactive (progn
                 (barf-if-buffer-read-only)
                 (list (if current-prefix-arg 'unfill) t)))
  (let ((fill-column (if unfill (point-max) fill-column)))
    (fill-paragraph nil region)))

(defun kill-to-beginning-of-line ()
  "Delete from current point to beginning of line"
  (interactive)
  (save-excursion
    (let ( (beg (point)) )
      (beginning-of-line)
      (delete-region beg (point)))))



#+end_src
    
** Custom keybinds
#+begin_src emacs-lisp
(global-set-key (kbd "M-Q") 'unfill-paragraph)
(global-set-key [?\C-u] 'kill-to-beginning-of-line)
(global-set-key  (kbd "M-q") 'my/fill-or-unfill-paragraph)

;;paste key binding redefine
(global-set-key (kbd "C-v") 'yank)
(global-set-key "\C-f" 'forward-sexp)
(global-set-key "\C-b" 'backward-sexp)
(global-set-key (kbd "C-;") 'comment-or-uncomment-region)
(global-set-key "\C-cy" 'helm-show-kill-ring)

;; Unbind Pesky Sleep Button
;; (global-unset-key [(control z)])
(global-unset-key [(control x)(control z)])

;;imenu to call up function names
(global-set-key [mouse-8] 'imenu)

;; org mode narrowing
(global-set-key "\C-x\t" 'org-show-current-heading-tidily)

;; pomodoro
(global-set-key (kbd "<f12>") 'pomodoro-start)
(global-set-key (kbd "S-<f12>") 'pomodoro-stop)

;;; jumping around cloned buffers
(global-set-key (kbd "<s-mouse-1>") 'my/goto-same-spot-in--other-buffer)
(global-set-key (kbd "s-m") 'my/goto-same-spot-in-other-buffer)
(global-set-key (kbd "<C-s-mouse-1>") 'my/jump-to-point-and-show)
(global-set-key (kbd "C-s-m") 'my/jump-to-point-and-show)
#+end_src

* Programming                                                          :core:
** Clojure
#+begin_src emacs-lisp
(setq cider-repl-use-clojure-font-lock t)
(setq cider-show-error-buffer 'except-in-repl) ; or
(setq cider-annotate-completion-candidates nil)
(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
(setq cider-repl-display-in-current-window t)
(setq cider-prefer-local-resources t)
(setq cider-repl-wrap-history t)
(setq cider-repl-history-size 1000) ; the default is 500
(setq cider-repl-history-file "~/.lein-repl-history")

(add-hook 'clojure-mode-hook (lambda ()
                               (clj-refactor-mode 1)
                               ;; insert keybinding setup here
                               ))

(font-lock-add-keywords 'clojure-mode
                        '(("(\\|)" . 'esk-paren-face)))

;;pretify symbols
(eval-after-load 'clojure-mode
  '(font-lock-add-keywords
    'clojure-mode
    (mapcar
     (lambda (pair)
       `(,(car pair)
         (0 (progn (compose-region
                    (match-beginning 0) (match-end 0)
                    ,(cadr pair))
                   nil))))
     '(("\\<fn\\>" ?ƒ)
       ("\\<comp\\>" ?∘)
       ("\\<partial\\>" ?þ)
       ("\\<complement\\>" ?¬)))))
#+end_src

** Company
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'company-mode)
(add-hook 'cider-repl-mode-hook #'company-mode)

(add-to-list 'company-backends 'company-capf)
(setq company-idle-delay 0.2)
(setq company-tooltip-limit 10)
(setq company-minimum-prefix-length 3)
(setq company-echo-delay 0)

#+end_src

** Highlight parens
#+begin_src emacs-lisp
(require 'highlight-parentheses)
(add-hook 'clojure-mode-hook 'highlight-parentheses-mode)
(add-hook 'cider-repl-mode-hook 'highlight-parentheses-mode)
(setq hl-paren-colors '("firebrick1" "blue violet" "steel blue" "green"))
(set-face-attribute 'show-paren-match-face nil :weight 'extra-bold
                    :background "aquamarine")

#+end_src

** Parentheses management
*** smartparens
#+begin_src emacs-lisp
(require 'smartparens-config)
(add-hook 'cider-repl-mode-hook 'smartparens-mode)

(dolist (mode '(scheme emacs-lisp lisp clojure clojurescript))
  (add-hook (intern (concat (symbol-name mode) "-mode-hook"))
            'smartparens-mode))

(define-key sp-keymap (kbd "M-<up>") 'sp-splice-sexp-killing-backward)
(define-key sp-keymap (kbd "M-<down>") 'sp-splice-sexp-killing-forward)
(sp-pair "(" ")" :wrap "M-(")
(define-key sp-keymap (kbd "C-k") 'sp-kill-sexp)
(define-key sp-keymap (kbd "M-d") 'sp-kill-word)
(define-key sp-keymap (kbd "M-RET") 'sp-newline)
(define-key sp-keymap (kbd "C-<right>") 'sp-forward-slurp-sexp)
(define-key sp-keymap (kbd "C-<left>") 'sp-forward-barf-sexp)
#+end_src

*** Paredit
#+begin_src emacs-lisp :tangle no
;; TODO: look into parenface package
(defface esk-paren-face
  '((((class color) (background dark))
     (:foreground "grey50"))
    (((class color) (background light))
     (:foreground "grey55")))
  "Face used to dim parentheses."
  :group 'starter-kit-faces)

(eval-after-load 'paredit
  ;; need a binding that works in the terminal
  '(progn
     (define-key paredit-mode-map (kbd "M-)") 'paredit-forward-slurp-sexp)
     (define-key paredit-mode-map (kbd "M-(") 'paredit-backward-slurp-sexp)))

(dolist (mode '(scheme emacs-lisp lisp clojure clojurescript))
  (when (> (display-color-cells) 8)
    (font-lock-add-keywords (intern (concat (symbol-name mode) "-mode"))
                            '(("(\\|)" . 'esk-paren-face))))
  (add-hook (intern (concat (symbol-name mode) "-mode-hook"))
            'paredit-mode))

#+end_src

* Text editor
** Org mode                                                       :optional:
*** Reftex
#+begin_src emacs-lisp
(defun org-mode-reftex-setup ()
  (load-library "reftex")
  (and (buffer-file-name) (file-exists-p (buffer-file-name))
       (progn
         ;enable auto-revert-mode to update reftex when bibtex file changes on disk
         (auto-revert-mode t)
         (reftex-parse-all)
         ;add a custom reftex cite format to insert links
         (reftex-set-cite-format
          '((?b . "[[bib:%l][%l-bib]]")
            (?n . "*** [[notes:%l][notes-%l]]")
            (?p . "** [[papers:%j/%A_%y_%t][%l]]: %t\n")
            (?t . "%t")
            (?h . "** %t\n:PROPERTIES:\n:Custom_ID: %l\n:END:\n[[papers:%l][%l-paper]]")))))
  (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
  (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))

(defun org-mode-reftex-search ()
  ;;jump to the notes for the paper pointed to at from reftex search
  (interactive)
  (org-open-link-from-string (format "[[notes:%s]]" (first (reftex-citation t)))))

(add-hook 'org-mode-hook 'org-mode-reftex-setup)

(setq org-link-abbrev-alist
      '(("bib" . "~/research/all.bib::%s")
        ("notes" . "~/org/paper-notes.org::#%s")
        ("papers" . "~/Dropbox/papers/%s.pdf")))
#+end_src
*** org Custom functions
#+begin_src emacs-lisp

;This function works between buffer and it's clone.
(defun my/goto-same-spot-in-other-buffer () 
  "Go to the same location in the other buffer. Useful for when you have cloned indirect buffers"
  (interactive)
  (let ((my/goto-current-point (point)))
    (other-window 1)
    (goto-char my/goto-current-point)
    (when (invisible-p (point))
      (org-reveal))))

;This function is a clone-to-buffer jump only:
; It does find the other buffer first thou instead of just jumping to the other 
; window as does the function above.
(defun my/jump-to-point-and-show ()
  "Switch to a cloned buffer's base buffer and move point to the
cursor position in the clone."
  (interactive)
  (let ((buf (buffer-base-buffer)))
    (unless buf
      (error "You need to be in a cloned buffer!"))
    (let ((pos (point))
          (win (car (get-buffer-window-list buf))))
      (if win
          (select-window win)
        (other-window 1)
        (switch-to-buffer buf))
      (goto-char pos)
      (when (invisible-p (point))
        (show-branches)))))

(defun org-show-current-heading-tidily ()
  "Show next entry, keeping other entries closed."
  (interactive)
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-back-to-heading)
    (unless (and (bolp) (org-on-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)
    (recenter-top-bottom)))

#+end_src

*** org customization
#+begin_src emacs-lisp
(setq org-directory "~/org/")
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cr" 'org-capture)
;;(define-key org-mode-map "\M-q" 'toggle-truncate-lines)

(setq org-use-sub-superscripts "{}")

(custom-set-variables
 '(ess-swv-pdflatex-commands (quote ("pdflatex" "texi2pdf" "make")))
 '(ess-swv-plug-into-AUCTeX-p t)
 '(ess-swv-processor (quote knitr))
 '(org-agenda-files (quote ("~/org/tasks.org")))
 '(org-default-notes-file "~/org/notes.org")
 '(org-agenda-ndays 7)
 '(org-deadline-warning-days 14)
 '(org-agenda-show-all-dates t)
 '(org-agenda-skip-deadline-if-done t)
 '(org-agenda-skip-scheduled-if-done t)
 '(org-agenda-start-on-weekday nil)
 '(org-reverse-note-order t)
 '(org-fast-tag-selection-single-key (quote expert))
 '(org-agenda-custom-commands
   (quote (("d" todo "DELEGATED" nil)
           ("c" todo "DONE|DEFERRED|CANCELLED" nil)
           ("w" todo "WAITING" nil)
           ("W" agenda "" ((org-agenda-ndays 21)))
           ("A" agenda ""
            ((org-agenda-skip-function
              (lambda nil
                (org-agenda-skip-entry-if (quote notregexp) "\\=.*\\[#A\\]")))
             (org-agenda-ndays 1)
             (org-agenda-overriding-header "Today's Priority #A tasks: ")))
           ("u" alltodo ""
            ((org-agenda-skip-function
              (lambda nil
                (org-agenda-skip-entry-if (quote scheduled) (quote deadline)
                                          (quote regexp) "\n]+>")))
             (org-agenda-overriding-header "Unscheduled TODO entries: ")))))))

(defun capture-bib (path)
  (let ((name (read-string "Name: ")))
    (expand-file-name (format "%s.bib" name) path)))

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/tasks.org" "Tasks")
         "** TODO %^{Brief Description} %?\n %u" )
        ("i" "Ideas" entry (file "~/org/ideas.org") "** %^{Title} %U\n%?\n"  )
        ("b" "Bibtex citation" plain (file (capture-bib "~/research/refs/")))
        ("B" "Bibtex citation to all" plain (file "~/research/all.bib"))))



#+end_src
*** keyword faces
#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      '(
        ("TODO" . (:foreground "#ff4500" :weight bold))
        ("IN-PROGRESS" . (:foreground "yellow" :weight bold))
        ("WAITING" . (:foreground "purple" :weight bold))
        ("DONE" . (:foreground "light steel blue" :weight bold))
        ("READ" . (:foreground "light steel blue" :weight bold))
        ("NEED-NOTES" . (:foreground "yellow" :weight bold))))

(setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
#+end_src

*** Export beamer
#+begin_src emacs-lisp
;; allow for export=>beamer by placing

;; #+LaTeX_CLASS: beamer in org files
(unless (boundp 'org-export-latex-classes)
  (setq org-export-latex-classes nil))
(add-to-list 'org-export-latex-classes
  ;; beamer class, for presentations
  '("beamer"
     "\\documentclass[11pt]{beamer}\n
      \\mode<{{{beamermode}}}>\n
      \\usetheme{{{{beamertheme}}}}\n
      \\usecolortheme{{{{beamercolortheme}}}}\n
      \\beamertemplateballitem\n
      \\setbeameroption{show notes}
      \\usepackage[utf8]{inputenc}\n
      \\usepackage[T1]{fontenc}\n
      \\usepackage{hyperref}\n
      \\usepackage{color}
      \\usepackage{listings}
      \\usepackage{graphicx}
      \\lstset{numbers=none,language=[ISO]C++,tabsize=4,
  frame=single,
  basicstyle=\\small,
  showspaces=false,showstringspaces=false,
  showtabs=false,
  keywordstyle=\\color{blue}\\bfseries,
  commentstyle=\\color{red},
  }\n
      \\usepackage{verbatim}\n
      \\institute{{{{beamerinstitute}}}}\n          
       \\subject{{{{beamersubject}}}}\n"

     ("\\section{%s}" . "\\section*{%s}")
     
     ("\\begin{frame}[fragile]\\frametitle{%s}"
       "\\end{frame}"
       "\\begin{frame}[fragile]\\frametitle{%s}"
       "\\end{frame}")))

  ;; letter class, for formal letters

  (add-to-list 'org-export-latex-classes

  '("letter"
     "\\documentclass[11pt]{letter}\n
      \\usepackage[utf8]{inputenc}\n
      \\usepackage[T1]{fontenc}\n
      \\usepackage{color}"
     
     ("\\section{%s}" . "\\section*{%s}")
     ("\\subsection{%s}" . "\\subsection*{%s}")
     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
     ("\\paragraph{%s}" . "\\paragraph*{%s}")
     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

** Literate programming
#+begin_src emacs-lisp
(setq org-babel-clojure-backend 'cider)
(setq org-src-fontify-natively t)

; We only need Emacs-Lisp and Clojure in this tutorial:
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (clojure . t)
   (R . t)))

;; Let's have pretty source code blocks
(setq org-edit-src-content-indentation 0
      org-src-tab-acts-natively t
      org-src-fontify-natively t
      org-confirm-babel-evaluate nil)
#+end_src

** Latex
#+begin_src emacs-lisp
(TeX-global-PDF-mode t)
(setq reftex-plug-into-AUCTeX t)

#+end_src
* Yasnippet                                                        :optional:
#+begin_src emacs-lisp
(add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
(add-hook 'LaTeX-mode-hook 'yas-minor-mode-on)
(add-hook 'org-mode-hook 'yas-minor-mode-on)
(yas-reload-all)

(add-hook 'org-mode-hook
          (lambda ()
            (org-set-local 'yas/trigger-key [tab])
            (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
#+end_src

* ESS                                                              :optional:
#+begin_src emacs-lisp
(add-to-list 'ess-style-alist 
             '(my-style 
               (ess-indent-level . 4) 
               (ess-first-continued-statement-offset . 2) 
               (ess-continued-statement-offset . 0) 
               (ess-brace-offset . -4) 
               (ess-expression-offset . 4) 
               (ess-else-offset . 0) 
               (ess-close-brace-offset . 0) 
               (ess-brace-imaginary-offset . 0) 
               (ess-continued-brace-offset . 0) 
               (ess-arg-function-offset . 4) 
               (ess-arg-function-offset-new-line . '(4)) 
               )) 
    
   (setq ess-default-style 'my-style) 

#+end_src

* Random stuff                                                     :optional:
** Games
#+begin_src emacs-lisp
(autoload 'typing-of-emacs "typing" "The Typing Of Emacs, a game." t)
#+end_src
** ralee
#+begin_src emacs-lisp

;;ralee mode settings
(add-to-list 'load-path (concat dotfiles-dir "ralee-0.61/elisp"))
(autoload 'ralee-mode "ralee-mode" "Yay! RNA things" t)
(setq auto-mode-alist (cons '("\\.sto$" . ralee-mode) auto-mode-alist))

#+end_src
** pomodoro
#+begin_src emacs-lisp
(add-to-list 'load-path (concat dotfiles-dir "pomodoro.el/"))
(require 'pomodoro)
(pomodoro-add-to-mode-line)
#+end_src

* Unused                                                           :optional:
** Smex
#+begin_src emacs-lisp
(unless (package-installed-p 'smex)
  (package-install 'smex))

(setq smex-save-file (concat user-emacs-directory ".smex-items"))
(smex-initialize)
;(global-set-key (kbd "M-x") 'smex)

#+end_src

** Pretty mode
#+begin_src emacs-lisp :tangle no
(unless (package-installed-p 'pretty-mode)
  (package-install 'pretty-mode))

(require 'pretty-mode)
; if you want to set it globally
(global-pretty-mode t)

#+end_src
** undo-tree
#+begin_src emacs-lisp :tangle no
(require 'undo-tree)
(global-undo-tree-mode)

#+end_src
** Color theme
Unused as the theme is installed via ELPA. It is already on the path
#+begin_src emacs-lisp :tangle no
  (add-to-list 'custom-theme-load-path
               (concat package-user-dir "/solarized-theme-1.2.1"))

#+end_src



